(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('prop-types')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'prop-types'], factory) :
  (global = global || self, factory(global.ReactLoadingIo = {}, global.React, global.PropTypes));
}(this, function (exports, React, PropTypes) { 'use strict';

  React = React && React.hasOwnProperty('default') ? React['default'] : React;
  PropTypes = PropTypes && PropTypes.hasOwnProperty('default') ? PropTypes['default'] : PropTypes;

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(source, true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(source).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  var clsx = function clsx() {
    for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {
      classes[_key] = arguments[_key];
    }

    return classes.filter(Boolean).join(' ');
  };

  var Ball = function Ball(_ref) {
    var className = _ref.className,
        _ref$color = _ref.color,
        color = _ref$color === void 0 ? '#ED4585' : _ref$color,
        _ref$size = _ref.size,
        size = _ref$size === void 0 ? 200 : _ref$size,
        _ref$speed = _ref.speed,
        speed = _ref$speed === void 0 ? 1 : _ref$speed,
        style = _ref.style;
    var scale = size / 200;
    var translate = size * scale;
    return React.createElement("div", {
      className: clsx('rl-ball', className),
      style: _objectSpread2({
        '--rl-ball-size': "".concat(size, "px"),
        '--rl-ball-color': color,
        '--rl-ball-scale': scale,
        '--rl-ball-translate': "".concat(translate, "px"),
        '--rl-ball-speed': "".concat(speed, "s")
      }, style)
    }, React.createElement("div", null));
  };

  Ball.propTypes = {
    className: PropTypes.string,
    color: PropTypes.string,
    size: PropTypes.number,
    style: PropTypes.object
  };

  var DualRing = function DualRing(_ref) {
    var className = _ref.className,
        _ref$color = _ref.color,
        color = _ref$color === void 0 ? '#ED4585' : _ref$color,
        _ref$size = _ref.size,
        size = _ref$size === void 0 ? 200 : _ref$size,
        _ref$speed = _ref.speed,
        speed = _ref$speed === void 0 ? 1 : _ref$speed,
        _ref$width = _ref.width,
        width = _ref$width === void 0 ? 4 : _ref$width,
        style = _ref.style;
    var scale = size / 200;
    var translate = size * scale;
    var border = width * 2;
    return React.createElement("div", {
      className: clsx('rl-dual-ring', className),
      style: _objectSpread2({
        '--rl-dual-ring-size': "".concat(size, "px"),
        '--rl-dual-ring-color': color,
        '--rl-dual-ring-scale': scale,
        '--rl-dual-ring-translate': "".concat(translate, "px"),
        '--rl-dual-ring-speed': "".concat(speed, "s"),
        '--rl-dual-ring-border': "".concat(border, "px")
      }, style)
    }, React.createElement("div", null));
  };

  DualRing.propTypes = {
    className: PropTypes.string,
    color: PropTypes.string,
    size: PropTypes.number,
    width: PropTypes.number,
    style: PropTypes.object
  };

  var Eclipse = function Eclipse(_ref) {
    var className = _ref.className,
        _ref$color = _ref.color,
        color = _ref$color === void 0 ? '#ED4585' : _ref$color,
        _ref$size = _ref.size,
        size = _ref$size === void 0 ? 200 : _ref$size,
        _ref$speed = _ref.speed,
        speed = _ref$speed === void 0 ? 1 : _ref$speed,
        _ref$width = _ref.width,
        width = _ref$width === void 0 ? 2 : _ref$width,
        style = _ref.style;
    var scale = size / 200;
    var translate = size * scale;
    var thickness = width * 2;
    return React.createElement("div", {
      className: clsx('rl-eclipse', className),
      style: _objectSpread2({
        '--rl-eclipse-size': "".concat(size, "px"),
        '--rl-eclipse-color': color,
        '--rl-eclipse-scale': scale,
        '--rl-eclipse-translate': "".concat(translate, "px"),
        '--rl-eclipse-speed': "".concat(speed, "s"),
        '--rl-eclipse-thickness': "".concat(thickness, "px")
      }, style)
    }, React.createElement("div", null));
  };

  Eclipse.propTypes = {
    className: PropTypes.string,
    color: PropTypes.string,
    size: PropTypes.number,
    width: PropTypes.number,
    style: PropTypes.object
  };

  var Rolling = function Rolling(_ref) {
    var className = _ref.className,
        _ref$color = _ref.color,
        color = _ref$color === void 0 ? '#ED4585' : _ref$color,
        _ref$size = _ref.size,
        size = _ref$size === void 0 ? 200 : _ref$size,
        _ref$speed = _ref.speed,
        speed = _ref$speed === void 0 ? 1 : _ref$speed,
        _ref$width = _ref.width,
        width = _ref$width === void 0 ? 10 : _ref$width,
        style = _ref.style;
    var scale = size / 200;
    var translate = size * scale;
    var border = width * 2;
    return React.createElement("div", {
      className: clsx('rl-rolling', className),
      style: _objectSpread2({
        '--rl-rolling-size': "".concat(size, "px"),
        '--rl-rolling-color': color,
        '--rl-rolling-scale': scale,
        '--rl-rolling-translate': "".concat(translate, "px"),
        '--rl-rolling-speed': "".concat(speed, "s"),
        '--rl-rolling-border': "".concat(border, "px")
      }, style)
    }, React.createElement("div", null));
  };

  Rolling.propTypes = {
    className: PropTypes.string,
    color: PropTypes.string,
    size: PropTypes.number,
    width: PropTypes.number,
    style: PropTypes.object
  };

  var Spinner = function Spinner(_ref) {
    var className = _ref.className,
        _ref$color = _ref.color,
        color = _ref$color === void 0 ? '#ED4585' : _ref$color,
        _ref$size = _ref.size,
        size = _ref$size === void 0 ? 200 : _ref$size,
        _ref$speed = _ref.speed,
        speed = _ref$speed === void 0 ? 1 : _ref$speed,
        style = _ref.style;
    var scale = size / 200;
    var translate = size * scale;
    return React.createElement("div", {
      className: clsx('rl-spinner', className),
      style: _objectSpread2({
        '--rl-spinner-size': "".concat(size, "px"),
        '--rl-spinner-color': color,
        '--rl-spinner-scale': scale,
        '--rl-spinner-translate': "".concat(translate, "px"),
        '--rl-spinner-speed': "".concat(speed, "s")
      }, style)
    }, React.createElement("div", null), React.createElement("div", null), React.createElement("div", null), React.createElement("div", null), React.createElement("div", null), React.createElement("div", null), React.createElement("div", null), React.createElement("div", null), React.createElement("div", null), React.createElement("div", null), React.createElement("div", null), React.createElement("div", null));
  };

  Spinner.propTypes = {
    className: PropTypes.string,
    color: PropTypes.string,
    size: PropTypes.number,
    width: PropTypes.number,
    style: PropTypes.object
  };

  var Spin = function Spin(_ref) {
    var className = _ref.className,
        _ref$color = _ref.color,
        color = _ref$color === void 0 ? '#ED4585' : _ref$color,
        _ref$size = _ref.size,
        size = _ref$size === void 0 ? 200 : _ref$size,
        _ref$width = _ref.width,
        width = _ref$width === void 0 ? 10 : _ref$width,
        _ref$speed = _ref.speed,
        speed = _ref$speed === void 0 ? 1 : _ref$speed,
        style = _ref.style;
    var scale = size / 200;
    var translate = size * scale;
    var border = width * 4;
    return React.createElement("div", {
      className: clsx('rl-spin', className),
      style: _objectSpread2({
        '--rl-spin-size': "".concat(size, "px"),
        '--rl-spin-color': color,
        '--rl-spin-scale': scale,
        '--rl-spin-translate': "".concat(translate, "px"),
        '--rl-spin-speed': "".concat(speed, "s"),
        '--rl-spin-border': "".concat(border, "px")
      }, style)
    }, React.createElement("div", null, React.createElement("div", null)), React.createElement("div", null, React.createElement("div", null)), React.createElement("div", null, React.createElement("div", null)), React.createElement("div", null, React.createElement("div", null)), React.createElement("div", null, React.createElement("div", null)), React.createElement("div", null, React.createElement("div", null)), React.createElement("div", null, React.createElement("div", null)), React.createElement("div", null, React.createElement("div", null)));
  };

  Spin.propTypes = {
    className: PropTypes.string,
    color: PropTypes.string,
    size: PropTypes.number,
    width: PropTypes.number,
    style: PropTypes.object
  };

  exports.Ball = Ball;
  exports.DualRing = DualRing;
  exports.Eclipse = Eclipse;
  exports.Rolling = Rolling;
  exports.Spin = Spin;
  exports.Spinner = Spinner;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
